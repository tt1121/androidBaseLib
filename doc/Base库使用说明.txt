此说明文件描述公共基础库提供的服务
如果需要在项目中用到公共库里面拥有的功能，请不要使用自己写的那一套来，统一使用公共库的API。例如网络请求模块、DB处理、图片处理、下载处理等。
项目进行中如果模板代码可以进行公用化，无业务的操作，可以提交到基础库中。提交前请过Team Leader的审核，确认是否可以提交。


-------------------------------------------------------------------
》》队列处理器
对任务的排队处理进行统一的封装

AutoRunTaskQueue
队列执行者，调用start后即启用排队处理功能，指定具体的执行业务的AutoTaskRunner即可执行业务需求

-------------------------------------------------------------------
》》网络请求模块
进行常规网络接口请求，分为具有队列管理功能的 HttpConnectManager 和无状态的原始Http请求类 WebUtils

HttpConnectManager
此类提供统一的接口队列请求,getBackgroundInstance()方法为单线程排队执行，在遇到后台非前台业务数据请求的时候可以使用该单线程进行排队，避免非即时性请求妨碍即时性请求队列的执行
getInstance() 方法使用线程池进行请求，即时性请求请使用此实例请求

WebUtils
提供原始的网络请求类，支持get和post请求

UploadUtil
提供常规的文件上传功能

-------------------------------------------------------------------
》》线程池及线程的统一管理
此模块提供统一管理线程的ThreadPoolManager、Thread、AsyncTask

ThreadPoolManager
常规线程池，在原系统线程池上做拓展,保证线程数在达到Max后指定时间内未使用线程则清空回收线程。支持最新添加的线程优先执行

Thread
最终的调用会被转到 ThreadPoolManager 中

AsyncTask
最终的调用会被转到 ThreadPoolManager 中


-------------------------------------------------------------------
》》下载管理器
下载管理器支持队列下载、有状态记录的下载、断点续传、多任务下载、Service中的下载、多实例下载功能

DownloadServiceFactory 
根据此类生成下载管理器，实现任务记录和断点续传，目前支持普通下载管理器和支持Service的下载管理器
可以实现IDownloadService类后拓展功能，拓展为跨进程的下载控制等。

FacadeDownloadManager
提供一个简单操作下载管理器的外观类，业务常规的情况下可以直接使用此类进行下载管理操作

DownloaderBridge
带下载队列管理、下载任务状态存储、断点续传的主业务下载管理器，根据instanceId可以生成多个下载单例,以便多个下载业务需求的同时进行

DownloadExecutorManager
带下载队列管理的下载管理器

DownloadExecutor
纯粹的下载任务执行器，进行无状态无队列的文件下载功能。由于较少直接使用此类，如果单独使用简单下载，则注意各个下载参数的正确配置，必要的时候可以做一个Builder模式以便简单的创建一个下载任务

拓展存储方式：
可以根据DownloadTaskStorageFractory和IDownloadTaskStorage拓展DB以外的存储方式，例如文件存储

-------------------------------------------------------------------
》》反射工具
反射工具使用Apache的BeanUtils工具包的检查类，只裁剪了两个类进行实例创建和方法调用，如果有需要可以将更加丰富的功能加入库中

ConstructorUtils
实例创建工具

MethodUtils
方法调用工具

-------------------------------------------------------------------
》》自定义控件
自定义控件包括第三方的和自己的自定义控件

SlideMenu

ViewPager

PagerSlidingTabStrip
支持滑动效果的顶部TAB

SlideMenu
侧边栏Menu控件

LinearListView
根据LinearLayout实现的仿ListView。考虑到ListView在不同系统下的表现效果不一样，有的会有下拉弹性效果、未加载区域为一片黑等情况，如果需要避免此情况可以使用此类。

ScrollLayout
支持循环滑动Page的控件


-------------------------------------------------------------------
》》异步图片加载
直接使用 universalimageloader 库

考虑到universalimageloader库无准确的队列管理，图片资源准确释放，使用它的范围尽量局限在图片列表中使用，
需要准确控制图片下载队列、图片加载处理、图片及时释放、图片准时方式的情况下请自己根据业务Coding，或者在ImageLoader的基础上改


特别说明
线程池的使用：
1、在进行短时间操作的时候，例如DB、File，使用 ThreadPoolManagerQuick 类，统一放到这个线程池处理，不要再另开线程，造成线程资料的多余消耗，也不要在主线程直接搞了
2、在进行长时间操作的时候，例如网络请求，复杂任务长时间处理（大于10秒），使用 ThreadPoolManagerNormal 类
3、遇到需要一直开线程的再独立开一个线程
4、Utils包下的Thread、AsyncTask都使用了线程池

在相应项目发布测试的时候，如果不需要指定的模块，可以在本地删除该模块，例如下载、上传、ImageLoader、SlideMenu、Jackson解析，这样可以减少包的大小，但是不要将这些改动提交到SVN上去



